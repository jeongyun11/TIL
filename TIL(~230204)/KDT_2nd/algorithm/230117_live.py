# 문제 해결 경험한 적이 있나요?
# min()과 문제 해결력과 구현력과

N = '10'
answers =  '1 0 1 1 1 0 0 1 1 0'

N = int(N)
# print(type(N),N)

# map() : 안 쓰고 바꾸기
# answers.split()
# print(answers)

numbers = map(int,input().split())

sum = 0
score = 0
count = 0
while count < 10 : #   for number in numbers : 
    # 1이면 정답, 0이면 오답
    if numbers[count] == 1:
        score = score + 1
        sum = sum + score

    if numbers == 0:
        score = 0

    count += 1

    print(numbers[count], score)

    # 함수나 메서드 내장키워드는 변수로 사용하면 안 된다.

    # --------------------------------------------------------------------------------
    # --------------------------------------------------------------------------------

    # # 시간 복잡도 & 빅오 표기법

    # 알고리즘을 비교하려면 무엇이 필요할까?
    # 특정한 기준이 팔요하다.
    # 컴퓨터를 실행시키는데 드는 리소스는?
    # cpu 메모리 디스크....

    # cpu 같은 알고리즘인데 측정 시간이 다르다??

    # 최약의 입력 n개

    # 시간 복잡도
    # 알고리즘의 수행 시간 
    # 느리냐 빠르냐 -> 단순합

    # O(n)

    # list

    # 개념 -> 구현체

    # 길이를 변경하려면 새로 생성

    # 파이썬 리스트 다재다능

    numbers = [10, 2, 5, 7]

    for number in numbers : 
        if number % 2 == 0 : 
            numbers.pop()

# 짜잘하게 for나 if를 따지는 거 말고 실질적으로 실행되는 것을 카운트한다.

# 2. 문제 풀기

# # 3. 리스트 컴프리헨션 (좀 더 빠르게 연산)
# 리스트를 간단하게 생성하는 방법 
# 가독성이 곧 생명이다.

# 공간복잡도를 낮춰주는