# 알고리즘 문제를 해결학 ㅣ위해 정해진 일련의 절차나 행동 input으ㄹ ㅗ원하는 output

# 문제 파악 => 비즈니스 문제 발생
# 해결 방법구상
# 정답구현 => 구현 및 수정

# 개발자란? 문제해결을 하는 사람(기술을 좀 아는)

# 완벽한 협업 능력을 평가할 수는 없지만 신입의 실력을 측정하는데 좋은 지표가 된다.

# 코딩테스트 종류 온라인, 오프라인, 기업별

# 계산량

# 1. 문제 해결법 말로 설명하기 2. 연산 횟수에 대해 설명하기3. 손코딩4. 테스트 케이스는 뭐가 좋을까 ?5. 옵티마이징 할 수 있을까 ?6. 궁금한 점 ** 중간 중간 면접관과 협업하는 느낌 어필 **

# 많이 풀기? 백준, 프로그래머스, swea, leetcode, 데브매칭

# 함께 자라기
# 같은 유형을 반복해서 푸는 것도 좋다. X : 
# 답을 보고 나에게 적합한 풀이
# 괜찮은 풀이인지 아닌지 어떻게 구분하나요

# '내가 '

# 코드를 줄여썼다 x 한 줄의 코드는 무조건 반복, 조건문으로 풀어나갈 수가 있어요.
# map, list, comprehension, solved.ac

# (1) A라고 하는 문제를 '다른' 알고리즘으로 접근할 때가 있음 (시간복잡도)
# => '다른' 알고리즘을 학습하고 적용하는 기회
# (2) 지금 레벨
# 코드 테크닉 X, 일반적인 접근방법
# (3) 90~95% : 문자열, 리스트, 5~10% : 딕셔너리, 세트
# 총 문제 300 ~ 350문제를 풀면
# 나와의 싸움

# 기타꿀팁 읽어봅시다
# 테스트 어떻게 할 건지, 시간복잡도,

# # 4. 데이터 구조
# 허준이 교수와 아들

# 데이터를 다양한 방식으로저장하고 조회, 삽입, 변경, 삭제같은 조작 기능 제공한다
# 왜 데이터 구조가 중요한가?
# 문제 상황에 따라 더 적합한 도구가 필요하다!
# 문제에 더 효율적으로 풀기 위한 도구
# 구조에 맞게 적절한 메서드를 활용
# 구조를 보자
# 자료구조와 알고리즘은 기본

# 컴퓨터는 조작과 계산 저장

# 입력, 출력
# 변수에 이름을 할당
# 공백을 포함한
# 반복 가능한 곳에 map을 적용

# 빨간색은 멈춤

# 내가 작성한 로직이 있다면
# 주요 분기, 값의 변화

# 디버거도 결국
# 언제 어디에 찍어야하느냐가 중요하다
